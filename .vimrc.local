" Better font for GUI Vim
set guifont=Ubuntu\ Mono\ 11
noswap
let lang_delphi=1
let lang_basic=2
let lang_unknown=0
if !has ("gui_running")
    colorscheme borland
endif

function! InsertModeLine(lang_mode)
python << endpython
import vim,os
lang=vim.eval("a:lang_mode")
home=vim.eval("$HOME")
path=os.path.join(home, ".vim")
edline=0
if lang=="1":
    unitname=vim.eval("expand('%:r')")
    vim.current.buffer[0:0]=['unit '+unitname+';']
    name=os.path.join(path,"pascal.header")
    header=open(name)
    i=1
    for line in header:
        vim.current.buffer[i:0] = [line.rstrip()]
        i=i+1
    edline=25
    header.close()
if lang=="2":
    name=os.path.join(path,"basic.header")
    header=open(name)
    i=0
    for line in header:
        vim.current.buffer[i:0] = [line.rstrip()]
        i=i+1
    edline=16
    header.close()
vim.current.window.cursor=(edline,0)
del vim
endpython
endfunc

function! VimProject()
    if filereadable("./.vimproject")
        source ./.vimproject
    endif
endfunction

augroup Pascal_file
    autocmd!
    autocmd BufNewFile,BufRead *.pas,*.pp,*.dpr,*.lpr :let g:pascal_delphi=1
    autocmd BufNewFile,BufRead *.pas,*.pp,*.dpr,*.lpr :let g:pascal_fpc=1
    autocmd BufNewFile,BufRead *.pas,*.pp,*.dpr,*.lpr :set tabstop=4
    autocmd BufNewFile,BufRead *.pas,*.pp,*.dpr,*.lpr :set shiftwidth=4
    autocmd BufNewFile,BufRead *.pas,*.pp,*.dpr,*.lpr :set softtabstop=4
    autocmd BufNewFile,BufRead *.pas,*.pp,*.dpr,*.lpr :set expandtab
    autocmd BufNewFile,BufRead *.pas,*.pp,*.dpr,*.lpr :set nospell
    autocmd BufNewFile *.pas,*.pp :call InsertModeLine(lang_delphi)
    autocmd FileType pascal :compiler fpc
    autocmd FileType pascal :call VimProject()
    autocmd QuickFixCmdPost [^l]* nested cwindow
    autocmd QuickFixCmdPost    l* nested lwindow
    autocmd FileType pascal :imap <f2> <esc>:call CompileDelphi(l("DEBUG")<cr>
    autocmd FileType pascal :nmap <f2> :call CompileDelphi("DEBUG")<cr>
    autocmd BufNewFile,BufRead *.pas,*.pp,*.lpr,*.dpr :nmap <C-i> <esc>:call CodeComplete()<cr><esc>
augroup END

augroup FreeBasic
    autocmd!
    autocmd BufNewFile,BufRead *.bas,*.bi :set ft=freebasic
    autocmd BufNewFile,BufRead *.bas,*.bi :set nospell
    autocmd FileType freebasic :compiler fbc
    "autocmd BufNewFile *.bas,*.bi :call InsertModeLine(lang_basic)
augroup END

let g:primary_file=""

function! CompileDelphi(mode)
    execute ':wa'
python << endpython
import vim, os
mode=vim.eval("a:mode")
#primary_file=vim.eval("g:primary_file")
for file in os.listdir("."):
    if file.endswith(".dpr"):
        primary_file=file
        break
    elif file.endswith(".lpr"):
        primary_file=file
        break
    else:
        primary_file=vim.eval("g:primary_file")

if mode=='DEBUG':
    vim.command("set makeprg=ppcx64\ -dDEBUG\ @fp.cfg\ " + primary_file)
elif mode=='NORMAL':
    vim.command("set makeprg=ppcx64\ -dNORMAL\ @fp.cfg\ " + primary_file)
elif mode=='RELEASE':
    vim.command("set makeprg=ppcx64\ -dRELEASE\ @fp.cfg\ " + primary_file)
vim.command("make")
del vim
endpython
endfunc

set guioptions-=m
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"


" Map <F9> to run Pyclewn
map <F9> <esc>:Pyclewn<cr>:Cmapkeys<cr>

function! CodeComplete() abort
python << EOF
import vim
import re
def findClassName():
    print "findClassName"
    regex = "(?P<classname>^\w+)\s*\=\s*\class\s*((\(\s*\w+\s*\))?)$"
    line = vim.current.window.cursor[0]
    for i in range(line,0,-1):
        match = re.match(regex,vim.current.buffer[i].lstrip(),re.IGNORECASE)
        if match:
            classname = match.groupdict().get("classname")
            return classname
    return None

def createCode(match):
    print "createCode"
    classname=findClassName()
    print classname
    dict = match.groupdict()
    static = dict.get("static")
    code = []
    if static:
        code.append("class ")
    code.append(dict.get("decl"))
    code.append(" "+classname+".")
    code.append(dict.get("id"))
    if dict.get("params"):
        code.append(dict.get("params"))
    if dict.get("result"):
        code.append(dict.get("result"))
    code.append(";")
    return (classname,code)

def findPattern(bufline):
    print "findPattern"
    regex = "((?P<static>^static|^class)?)\s*(?P<decl>function|procedure|constructor|destructor)\s*(?P<id>\w+)\s*((?P<params>\((.+\)?))?)((?P<result>\s*\:\s*\w+\s*)?)(?P<endl>\;)"
    match = re.match(regex,bufline,re.IGNORECASE)
    if match:
        print match.groupdict()
        return createCode(match)
    return (None,None)

def findInsertLine(current,classname,insert):
    print "findInsertLine"
    impl = 0
    start = "{>> " + classname + " <<}"
    startpos = 0
    end = "{<< " + classname + " >>}"
    endpos = 0
    code = ""
    for items in insert:
        code = code+items
    print code
    insert = []
    insert.append(code);
    insert.append("begin");
    insert.append("\n")
    insert.append("end;")
    for i in range(current,len(vim.current.buffer)):
        if "implementation" in vim.current.buffer[i]:
            impl = i
        if start in vim.current.buffer[i]:
            startpos = i
        if end in vim.current.buffer[i] or "end." in vim.current.buffer[i] or "initialization" in vim.current.buffer[i]:
            endpos = i
            break
    if startpos > 0 and endpos > 0:
        for i in range(0,len(insert)):
            vim.current.buffer.append(insert[i],startpos+1+i);
    else:
        insert.insert(0,start)
        insert.append(end)
        for i in range(0,len(insert)):
            vim.current.buffer.append(insert[i], impl+1+i)
cursor=vim.current.window.cursor
buf=vim.current.buffer
line=cursor[0]-1 #-1 as first line is 0
bufline=buf[line].lstrip()
c = findPattern(bufline)
findInsertLine(cursor[0],c[0],c[1])
vim.current.window.cursor = cursor
EOF
endfunction
